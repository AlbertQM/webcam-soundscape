import processing.video.*;
import ddf.minim.*;
import ddf.minim.ugens.*;

Minim minim = new Minim(this);
Capture video;
Core core;


class Core {

  int loc;
  color[] colours; 
  ArrayList<Colour> trackedCols;
  int currentColor;
  float r, g, b;

  Core() {
    colours = new color[0];
    trackedCols = new ArrayList<Colour>(0);
  }

  void drawTracked() {//Draws the right sidebar showing all the tracked colours
    fill(255);
    strokeWeight(1);
    rect(640, 0, 260, height);

    if (colours.length > 0) {//Draws collection of tracked colours on the right
      for (int i=0; i < colours.length; i++) { 
        fill(red(colours[i]), green(colours[i]), blue(colours[i]));
        rect(680, 5 + i*85, 80, 80);
        text("#" + int(i+1) + " tracked colour", 770, 40 + i*85);
      }
    }
  }

  void track() {//Tracks all the colours in the arrayList
    for (Colour col : trackedCols) {
      col.reference = 500;
      for (int x = 0; x < video.width; x++ ) {
        for (int y = 0; y < video.height; y++ ) {
          loc = x + y * video.width;
          currentColor = video.pixels[loc];
          r = red(currentColor);
          g = green(currentColor);
          b = blue(currentColor);
          col.d = dist(r, g, b, col.r2, col.g2, col.b2);

          if (col.d < col.reference) {
            col.reference = col.d;
            col.x = x;
            col.y = y;
          }
        }
      }
    }
  }


  void drawTarget() {//Draws the target on top of the tracked colour
    for (Colour col : trackedCols) {
      if (col.reference < 10) { 
        strokeWeight(4);
        stroke(0);
        fill(col.r2, col.g2, col.b2);
        ellipse(col.x, col.y, 16, 16);
      }
    }
  }
}
